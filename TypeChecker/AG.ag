include "CCO/Diag/AG/Base.ag"

imports
{
import Control.Monad

import CCO.Component
import CCO.Feedback
import CCO.Printing
}


-------------------
-- Haskell logic --
-------------------

{
-- | Typechecks a diagram within the feedback monad. Produces an error in case of a type error and
--   returns when the diagram is well-typed.
typeCheck :: Diag -> Feedback ()
typeCheck d = feedback_Syn_Diag $ wrap_Diag (sem_Diag d) inherited
 where inherited = Inh_Diag {}

-- | The type check operation as a component. 
typeCheckComponent :: Component Diag ()
typeCheckComponent = component typeCheck 

-- | Notes a type error within the Feedback monad. Is provided with a description of the error.
typeError :: String -> Feedback a
typeError msg = errorMessage $ text $ "Error: " ++ msg

-- | Yields a typeError only if a certain condition is True.
errorIf :: Bool -> String -> Feedback ()
errorIf c msg = when c $ typeError msg

type VoidFeedback = Feedback ()

-- | Returns its first argument. Useful when specifying a default binary operator for synthesising 
--   that should throw away its operands in case they are combined.
const2 :: a -> b -> c -> a
const2 x _ _ = x

-- | Returns True if and only if both arguments are not Nothing and equal to each other.
justEq :: Eq a => Maybe a -> Maybe a -> Bool
justEq (Just a) (Just b) = a == b
justEq _ _ = False

}


------------------------------
-- Attributes and semantics --
------------------------------

attr Diag Diag_
 -- Any errors are encoded in here.
 syn feedback use {>>} {return ()} :: VoidFeedback
 
 -- True if and only if a diagram represents a platform.
 syn isPlatform use {const2 False} {False} :: Bool
 
 -- If an executable program (such as a compiler or interpreter) is written in a particular 
 -- language or can run on a certain platform, this holds the name of that language or platform.
 syn languageOrPlatform use {const2 Nothing} {Nothing} :: (Maybe Ident)

 -- Not Nothing in case this diagram is a platform with a certain name or an interpreter that can
 -- run a language with this name.
 syn runs use {const2 Nothing} {Nothing} :: (Maybe Ident)

 -- If a compiler, this holds the name of the language that can be compiled by it. Otherwise this is
 -- Nothing.
 syn compiles use {const2 Nothing} {Nothing} :: (Maybe Ident)

 -- A compiler sets this to the target language.
 syn targetLanguage use {const2 Nothing} {Nothing} :: (Maybe Ident)

 -- String representation of a diagram that can be included in error messages.
 syn stringRep :: String
 

sem Diag_
 | Program      lhs.languageOrPlatform = Just @l
                lhs.stringRep = "program " ++ @p ++ " in " ++ @l

 | Platform     lhs.isPlatform = True
                lhs.runs = Just @m
                lhs.stringRep = "platform " ++ @m

 | Interpreter  lhs.languageOrPlatform = Just @m
                lhs.runs = Just @l
                lhs.stringRep = "interpreter " ++ @i ++ " for " ++ @l ++ " in " ++ @m

 | Compiler     lhs.languageOrPlatform = Just @m
                lhs.compiles = Just @l1
                lhs.targetLanguage = Just @l2
                lhs.stringRep = "compiler " ++ @c ++ " from " ++ @l1 ++ " to " ++ @l2 ++ " in "
                                            ++ @m

 | Execute      lhs.feedback = do errorIf @d1.isPlatform "Trying to execute a platform."
                                  errorIf (not $ justEq @d2.runs @d1.languageOrPlatform)
                                   $ "Can not execute " ++ show @d1.stringRep ++ " on " 
                                      ++ show @d2.stringRep
                lhs.stringRep = "execute " ++ show @d1.stringRep ++ " on " ++ show @d2.stringRep 
                                           ++ " end"

 | Compile      lhs.languageOrPlatform = @d2.targetLanguage
                lhs.feedback = do errorIf @d1.isPlatform "Trying to compile a platform."
                                  errorIf (not $ justEq @d2.compiles @d1.languageOrPlatform) 
                                     $ show @d2.stringRep ++ " does not compile " 
                                        ++ show @d1.stringRep ++ "."
                lhs.stringRep = "compile " ++ @d1.stringRep ++ " with " ++ @d2.stringRep ++ " end"


                                

